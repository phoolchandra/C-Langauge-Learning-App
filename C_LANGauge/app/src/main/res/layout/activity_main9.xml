<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context="com.phoolchandra_kevin.c_lang.Main9Activity">


    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">

        <TextView
            android:id="@+id/textView"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_alignParentLeft="true"
            android:layout_alignParentStart="true"
            android:layout_alignParentTop="true"
            android:layout_marginLeft="13dp"
            android:layout_marginStart="13dp"
            android:layout_marginTop="11dp"
            android:textSize="30sp"
            android:textStyle="bold|italic"
            android:layout_gravity="center_horizontal"
            android:textColor="#9ACD32"
            android:text=" POINTERS "
            tools:ignore="HardcodedText" />

        <TextView
            android:id="@+id/textView1"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_alignParentLeft="true"
            android:layout_alignParentStart="true"
            android:layout_alignParentTop="true"
            android:layout_marginLeft="13dp"
            android:layout_marginStart="13dp"
            android:layout_marginTop="11dp"
            android:text="Pointers in C are easy and fun to learn. Some C programming tasks are performed more easily with pointers, and other tasks, such as dynamic memory allocation, cannot be performed without using pointers. So it becomes necessary to learn pointers to become a perfect C programmer. Let's start learning them in simple and easy steps.\n\n
As you know, every variable is a memory location and every memory location has its address defined which can be accessed using ampersand (and) operator, which denotes an address in memory. \n\n
What are Pointers?\n\nA pointer is a variable whose value is the address of another variable, i.e., direct address of the memory location. Like any variable or constant, you must declare a pointer before using it to store any variable address. The general form of a pointer variable declaration is −\n\n
type *var-name;\n\nHere, type is the pointer's base type; it must be a valid C data type and var-name is the name of the pointer variable. The asterisk * used to declare a pointer is the same asterisk used for multiplication. However, in this statement the asterisk is being used to designate a variable as a pointer. Take a look at some of the valid pointer declarations −\n\n
int    *ip;    /* pointer to an integer */\n
double *dp;    /* pointer to a double */\n
float  *fp;    /* pointer to a float */\n
char   *ch     /* pointer to a character */\n\nThe actual data type of the value of all pointers, whether integer, float, character, or otherwise, is the same, a long hexadecimal number that represents a memory address. The only difference between pointers of different data types is the data type of the variable or constant that the pointer points to.\n\n
NULL Pointers:-\n\nIt is always a good practice to assign a NULL value to a pointer variable in case you do not have an exact address to be assigned. This is done at the time of variable declaration. A pointer that is assigned NULL is called a null pointer.
"
            android:textSize="20sp"
            tools:ignore="HardcodedText" />
        <ImageView
            android:id="@+id/imageView"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            app:srcCompat="@drawable/ptrs" />

        <TextView
            android:id="@+id/textView3"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_alignParentLeft="true"
            android:layout_alignParentStart="true"
            android:layout_alignParentTop="true"
            android:layout_gravity="center_horizontal"
            android:layout_marginLeft="13dp"
            android:layout_marginStart="13dp"
            android:layout_marginTop="11dp"
            android:autoLink="all"
            android:clickable="true"
            android:text="link for further study:-\n https://www.tutorialspoint.com/cprogramming/c_pointers.htm"
            android:textColor="#00008B"
            android:textSize="20sp"
            android:textStyle="italic"
            tools:ignore="HardcodedText" />

    </LinearLayout>


</ScrollView>
